
//=======================================================
//  This code is generated by Terasic System Builder
//=======================================================

module wrapper(

	//////////// CLOCK //////////
	input 		          		CLOCK2_50,
	input 		          		CLOCK3_50,
	input 		          		CLOCK4_50,
	input 		          		CLOCK_50,

	//////////// KEY //////////
	//input 		     [3:0]		KEY,
	input KEY0,
	input KEY1,

	//////////// SW //////////
	//input 		     [9:0]		SW,
	input SW,

	//////////// LED //////////
	//output		     [9:0]		LEDR,

	//////////// Seg7 //////////
	/*output		     [6:0]		HEX0,
	output		     [6:0]		HEX1,
	output		     [6:0]		HEX2,
	output		     [6:0]		HEX3,
	output		     [6:0]		HEX4,
	output		     [6:0]		HEX5,*/

	//////////// Audio //////////
	input 		          		AUD_ADCDAT,
	inout 		          		AUD_ADCLRCK,
	inout 		          		AUD_BCLK,
	output		          		AUD_DACDAT,
	inout 		          		AUD_DACLRCK,
	output		          		AUD_XCK,

	//////////// I2C for Audio and Video-In //////////
	output		          		FPGA_I2C_SCLK,
	inout 		          		FPGA_I2C_SDAT
);



//=======================================================
//  REG/WIRE declarations
//=======================================================
wire clock_i2c;
wire [23:0] data_i2c;
wire KEY_ON;
wire END;
wire GO;
wire [23:0] soung_org;
wire [23:0] output_filter;
wire [23:0] output_noise;

//=======================================================
//  Structural coding
//=======================================================
assign  output_noise = AUD_ADCDAT;



CLOCK_500 clk_500(
	.CLOCK(CLOCK_50),
	.CLOCK_500(clock_i2c),
	.DATA(data_i2c),
	.END(END),
	.RESET(KEY_ON),
	.GO(GO),
	.CLOCK_2(AUD_XCK)
);

i2c i2c1(
	.CLOCK(clock_i2c),
	.I2C_SCLK(FPGA_I2C_SCLK),//I2C CLOCK
 	.I2C_SDAT(FPGA_I2C_SDAT),//I2C DATA
	.I2C_DATA(data_i2c),//DATA:[SLAVE_ADDR,SUB_ADDR,DATA]
	.GO(GO),      //GO transfor
	.END(END),     //END transfor 
	.W_R(),     //W_R
	.ACK(),      //ACK
	.RESET(1'b1),
	//TEST
	.SD_COUNTER(),
	.SDO()
);

keytr keytr1(
	.key(KEY0),
	.ON(),
	.clock(clock_i2c),
   .KEYON(KEY_ON),
   .counter()	
	);

filter filt1(
	.rst(KEY1),
	.clk(CLOCK_50),
	.sound_org(output_noise),
	.sound_fil(output_filter)
	);
read_SW SW1(
	.SW(SW),
	.output_noise(output_noise),
	.output_filter(output_filter),
	.DAC(AUD_DACDAT)
	);
	
endmodule
